package org.grits.toolbox.tools.databasebot.om;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.eurocarbdb.MolecularFramework.sugar.Sugar;
import org.eurocarbdb.application.glycanbuilder.Glycan;

/**
 * Helper class that is create for each instance of a glycan. It caches
 * information about the glycan so that this information does not need to be
 * regenerated all the time. E.g. if a glycan gets added by GWS sequence the
 * GlycoCT sequence is created immediately and store so that it can be retrieved
 * whenever its needed. Keep in mind that conversion between Glycan and Sugar
 * objects are slow.
 *
 * @author rene
 *
 */
public class GlycanInformation
{
    /**
     * ID of the glycan. This can be a preexisting ID if the glycan is imported
     * from a database, a newly generated ID by the database generator or null
     * if no ID is generated yet.
     */
    private String m_id = null;
    
    private String glytoucan_id = null;
    
    /**
     * Hashmap with the composition of the glycan. The string represents the
     * components (e,g. Hex, HexNac, S) and the integer the abbundance of this
     * component.
     */
    private HashMap<String, Integer> m_composition = null;
    /**
     * Native mass of the glycan (in most cases free end), usually generated by
     * GlycoWorkbench
     */
    private Double m_mass = null;
    /** Permethylated mass of the glycan, usually generated by GlycoWorkbench */
    private Double m_massPme = null;
    /**
     * String with the composition of the glycan, this is a ordered
     * serialization of the composition HashMap
     */
    private String m_compositionName = null;
    /**
     * GlycoCT sequence of the glycan. This sequence is necessary to calculate
     * metadata and composition
     */
    private String m_glycoCT = null;
    /**
     * GlycoWorkbench sequence of the glycan. This sequence is necessary to
     * calculate mass, fragments and images
     */
    private String m_gwb = null;
    /**
     * Sugar object of the glycan. This corresponds to a parsed GlycoCT
     * sequence.
     */
    private Sugar m_sugar = null;
    /**
     * GlycoWorkbench glycan object for the glycan. This corresponds to a parsed
     * GWS sequence
     */
    private Glycan m_glycan = null;
    /** Flag if the glycan passed the filters specified by the user. */
    private Boolean m_passFilter = Boolean.TRUE;
    /**
     * If the glycan was generated by the topology creation algorithm this list
     * stores all glycans that resulted into this topology (e.g. isomeric
     * glycans with the same topology but different linkages).
     */
    private List<GlycanInformation> m_topologyOrigin = new ArrayList<GlycanInformation>();

    public String getId()
    {
        return this.m_id;
    }

    public void setId(String a_id)
    {
        this.m_id = a_id;
    }

    public HashMap<String, Integer> getComposition()
    {
        return this.m_composition;
    }

    public void setComposition(HashMap<String, Integer> a_composition)
    {
        this.m_composition = a_composition;
    }

    public void setMass(Double mass)
    {
        m_mass = mass;
    }

    public Double getMass()
    {
        return m_mass;
    }

    public Double getMassPme()
    {
        return m_massPme;
    }

    public void setMassPme(Double massPme)
    {
        this.m_massPme = massPme;
    }

    public String getCompositionName()
    {
        return m_compositionName;
    }

    public void setCompositionName(String a_compositionName)
    {
        m_compositionName = a_compositionName;
    }

    public String getGwb()
    {
        return m_gwb;
    }

    public void setGwb(String a_gwb)
    {
        m_gwb = a_gwb;
    }

    /**
     * Creates a copy of the GlycanInformation object by creating a new object
     * (x.clone() != x). However the clone method uses a flat copy that means
     * that the member variables are shared between the original object and the
     * clone (e.g. x.m_id == x.clone().m_id). If the member variables of the
     * clone need to be changed, do not use the clone() method since this will
     * change the members of the original at the same time.
     */
    @Override
    public GlycanInformation clone()
    {
        GlycanInformation t_result = new GlycanInformation();
        t_result.setComposition(this.m_composition);
        t_result.setCompositionName(this.m_compositionName);
        t_result.setGwb(this.m_gwb);
        t_result.setId(this.m_id);
        t_result.setMass(this.m_mass);
        t_result.setMassPme(this.m_massPme);
        t_result.setGlycoCT(this.m_glycoCT);
        t_result.setGlytoucanId(this.glytoucan_id);
        return t_result;
    }

    public String getGlycoCT()
    {
        return m_glycoCT;
    }

    public void setGlycoCT(String a_glycoCT)
    {
        m_glycoCT = a_glycoCT;
    }

    public Sugar getSugar()
    {
        return m_sugar;
    }

    public void setSugar(Sugar m_sugar)
    {
        this.m_sugar = m_sugar;
    }

    public Glycan getGlycan()
    {
        return m_glycan;
    }

    public void setGlycan(Glycan m_glycan)
    {
        this.m_glycan = m_glycan;
    }

    public Boolean getPassFilter()
    {
        return m_passFilter;
    }

    public void setPassFilter(Boolean m_passFilter)
    {
        this.m_passFilter = m_passFilter;
    }

    public List<GlycanInformation> getTopologyOrigin()
    {
        return m_topologyOrigin;
    }

    public void setTopologyOrigin(List<GlycanInformation> a_topologyOrigin)
    {
        this.m_topologyOrigin = a_topologyOrigin;
    }

    public boolean addTopoglogyOrigin(GlycanInformation a_origin)
    {
        return this.m_topologyOrigin.add(a_origin);
    }
    
    public String getGlytoucanId() {
		return glytoucan_id;
	}
    
    public void setGlytoucanId(String glytoucan_id) {
		this.glytoucan_id = glytoucan_id;
	}

}
